Title	URL	Orden	Assignees	Status	Épica	ID_HU	Historia de Usuario	Criterios de Aceptación	Entregable	ID_Tarea	Descripción de la Tarea	Área	Prioridad	Estimado (h)	Herramientas / Tecnologías
`PM-01 | PM1` Planificación y estimación — Estimación WBS	https://github.com/24BytesCo/prueba-tecnica-devsu/issues/44	1	24BytesCo	Done	EPIC-P PMO	PM-01	Como PM, necesito estimar el esfuerzo de todas las tareas y documentar supuestos.	Cada tarea tiene una estimación (h), supuestos y total agregado; se versiona el Excel.	Estimación WBS	PM1	Revisar WBS, ajustar 'Estimado (h)' y documentar supuestos/riesgos en /docs/plan/estimaciones.md.	PM	H	4	Excel/Sheets
`PM-02 | PM2` Organización en GitHub Projects — Proyecto de GitHub configurado	https://github.com/24BytesCo/prueba-tecnica-devsu/issues/45	2	24BytesCo	Todo	EPIC-P PMO	PM-02	Como PM, necesito subir y organizar el backlog en GitHub Projects con vistas y workflows.	Proyecto creado, campos configurados (Estado, Prioridad, Área, ID_HU/ID_Tarea), vistas Table/Board/Timeline, importación desde CSV, workflows básicos.	Proyecto de GitHub configurado	PM2	Crear Project, campos y vistas; importar CSV del WBS; configurar workflows; enlazar issues.	PM	H	3	GitHub Projects
`HU-Auth-01 | T-A1.3` Identidad (dos roles) — Identity + Roles	https://github.com/24BytesCo/prueba-tecnica-devsu/issues/46	3	24BytesCo	Todo	EPIC-A Auth	HU-Auth-01	Como sistema, necesito dos roles para autorización básica.	Existen roles Admin y Operador; usuarios de seed asignados a cada rol.	Identity + Roles	T-A1.3	Configurar ASP.NET Identity con Roles (Admin, Operador) y claims básicas; sin UI de admin.	Backend	H	3	ASP.NET Identity, EF Core
`HU-Cli-01 | T-B1.2` Modelo de BD — ERD + Migración	https://github.com/24BytesCo/prueba-tecnica-devsu/issues/47	4	24BytesCo	Todo	EPIC-B Clientes	HU-Cli-01	Como operador, quiero crear/gestionar clientes.	Persona/Cliente normalizados; unicidad identificación; índices.	ERD + Migración	T-B1.2	Diseñar Persona/Cliente y constraints (UK identificación, índices).	BD	H	3	ERD, EF Core
`HU-Cta-01 | T-C1.2` Modelo de BD — ERD + Migración	https://github.com/24BytesCo/prueba-tecnica-devsu/issues/48	5	24BytesCo	Todo	EPIC-C Cuentas	HU-Cta-01	Como operador, quiero abrir/gestionar cuentas.	Cuentas con PK, UK(numeroCuenta), FK(clienteId), checks e índices.	ERD + Migración	T-C1.2	Definir tabla Cuentas, constraints e índices; actualizar migración.	BD	H	3	ERD, EF Core
`HU-Mov-01 | T-D1.1` Reglas de dominio — Domain Spec	https://github.com/24BytesCo/prueba-tecnica-devsu/issues/49	6	24BytesCo	Todo	EPIC-D Movimientos	HU-Mov-01	Como operador, quiero registrar créditos/débitos con saldos correctos.	Sin sobregiro; límite diario; redondeo; saldo posterior correcto.	Domain Spec	T-D1.1	Documentar invariantes (signos, no sobregiro, tope diario, redondeo).	Backend	H	2	Domain Spec
`HU-Mov-01 | T-D1.2` Modelo de BD — ERD + Migración	https://github.com/24BytesCo/prueba-tecnica-devsu/issues/50	7	24BytesCo	Todo	EPIC-D Movimientos	HU-Mov-01	Como operador, quiero registrar créditos/débitos con saldos correctos.	Tabla Movimientos + índices (NumeroCuenta, Fecha DESC) + constraints.	ERD + Migración	T-D1.2	Definir tabla Movimientos, índices y tipos monetarios/fechas.	BD	H	3	ERD, EF Core
`SET-03 | BD8` Base de Datos - Migración inicial — Migración inicial + script	https://github.com/24BytesCo/prueba-tecnica-devsu/issues/51	8	24BytesCo	Todo	EPIC-0 Setup	SET-03	Como diseñador de BD, quiero un esquema normalizado para las entidades.	Dadas las entidades, entonces se alcanza 3FN; claves/índices y tipos correctos.	Migración inicial + script	BD8	Configurar DbContext, entidades mínimas y crear migración inicial.	Backend	H	3	EF Core, SQL}
`SET-00 | T-S0.1` Configuración de Entorno — Repo inicial + convenciones	https://github.com/24BytesCo/prueba-tecnica-devsu/issues/52	9	24BytesCo	Todo	EPIC-0 Setup	SET-00	Como desarrollador, necesito un repositorio inicial con convenciones.	Dado un repo vacío, entonces contiene .gitignore, README, .editorconfig y guía de ramas/commits.	Repo inicial + convenciones	T-S0.1	Crear repo, .gitignore, README, .editorconfig, CONTRIBUTING (GitFlow/Conventional).	DevOps	H	1	Git, EditorConfig
`SET-01 | T-S0.2` Normas de ramas y commits — Documento GitFlow + Conventional Commits	https://github.com/24BytesCo/prueba-tecnica-devsu/issues/53	10	24BytesCo	Todo	EPIC-0 Setup	SET-01	Como equipo, necesitamos un documento de GitFlow y Conventional Commits para estandarizar el trabajo.	Existe guía de ramas (feature/hotfix/release), convención de commits (Conventional Commits), formato de títulos y cuerpo, ejemplo de PR.	Documento GitFlow + Conventional Commits	T-S0.2	Redactar /docs/CONTRIBUTING.md con GitFlow, nomenclatura de ramas, plantillas de commit/PR.	Docs	H	1	Markdown, Git
`SET-02 | T-S1.2` Estructura de Solución — Solución y proyectos	https://github.com/24BytesCo/prueba-tecnica-devsu/issues/54	11	24BytesCo	Todo	EPIC-0 Setup	SET-02	Como desarrollador, necesito una solución por capas.	Dadas las plantillas, entonces los proyectos están organizados (API, Dominio, Infra, App).	Solución y proyectos	T-S1.2	Crear solución .NET 9 y workspace Angular; convenciones de carpetas/namespaces.	Backend	H	2	.NET 9, Angular CLI
`HU-Auth-01 | T-A1.1` Autenticación — Estrategia JWT + cookies	https://github.com/24BytesCo/prueba-tecnica-devsu/issues/55	12	24BytesCo	Todo	EPIC-A Auth	HU-Auth-01	Como usuario, quiero iniciar sesión para acceder a funcionalidades autorizadas.	Válido→token; inválido→error; expiración→refresh; logout revoca refresh.	Estrategia JWT + cookies	T-A1.1	Definir estrategia (access/refresh), expiraciones y política de cookies.	Backend	H	3	.NET 9, JWT
`HU-Auth-01 | T-A1.2` Autenticación — OpenAPI /auth	https://github.com/24BytesCo/prueba-tecnica-devsu/issues/56	13	24BytesCo	Todo	EPIC-A Auth	HU-Auth-01	Como usuario, quiero iniciar sesión para acceder a funcionalidades autorizadas.	Swagger muestra contratos claros; errores en ProblemDetails.	OpenAPI /auth	T-A1.2	OpenAPI para /auth/login, /auth/refresh, /auth/logout, /auth/me.	Backend	H	2	Swagger/OpenAPI
`SET-04 | BD10` Semillas mínimas — Seeds iniciales	https://github.com/24BytesCo/prueba-tecnica-devsu/issues/57	14	24BytesCo	Todo	EPIC-0 Setup	SET-04	Como desarrollador, necesito datos mínimos para probar.	Dado el entorno dev, al levantar el contenedor existen 2 roles y usuarios base.	Seeds iniciales	BD10	Sembrar roles (Admin, Operador), usuarios demo, clientes/cuentas de ejemplo del enunciado.	Backend	M	2	EF Core, JSON
`HU-Auth-01 | T-A1.5` Interfaz de autenticación — UI de Login	https://github.com/24BytesCo/prueba-tecnica-devsu/issues/58	15	24BytesCo	Todo	EPIC-A Auth	HU-Auth-01	Como usuario, quiero iniciar sesión para acceder a funcionalidades autorizadas.	Login válido redirige; inválido muestra error; mantiene sesión.	UI de Login	T-A1.5	Login en Angular, servicio de auth, interceptor, AuthGuard (solo roles).	Backend	H	4	Angular
`HU-Auth-01 | T-A1.6` Pruebas de autenticación — Suite de pruebas	https://github.com/24BytesCo/prueba-tecnica-devsu/issues/59	16	24BytesCo	Todo	EPIC-A Auth	HU-Auth-01	Como equipo, quiero validar login/refresh/logout.	Al menos 2 pruebas unitarias de endpoints; colección de endpoints.	Suite de pruebas	T-A1.6	xUnit para servicios/endpoints y colección Postman para /auth.	QA	M	3	xUnit, Postman
`HU-Cli-01 | T-B1.1` Endpoints CRUD — OpenAPI /clientes	https://github.com/24BytesCo/prueba-tecnica-devsu/issues/60	17	24BytesCo	Todo	EPIC-B Clientes	HU-Cli-01	Como operador, quiero crear/gestionar clientes.	POST crea; PUT/PATCH actualiza; DELETE elimina/soft; validaciones visibles.	OpenAPI /clientes	T-B1.1	Definir contratos OpenAPI CRUD + errores (400/404/409).	Backend	H	2	Swagger/OpenAPI
`HU-Cli-01 | T-B1.3` Pantallas de Interfaz — UI Clientes	https://github.com/24BytesCo/prueba-tecnica-devsu/issues/61	18	24BytesCo	Todo	EPIC-B Clientes	HU-Cli-01	Como operador, quiero CRUD de clientes en la UI.	Listado con búsqueda/paginación; Crear/Editar; validaciones visibles.	UI Clientes	T-B1.3	Lista + Form (reactive forms) + servicio Angular; visibilidad por rol.	Frontend	M	4	Angular
`HU-Cli-01 | T-B1.4` Pruebas — API+UI Tests	https://github.com/24BytesCo/prueba-tecnica-devsu/issues/62	19	24BytesCo	Todo	EPIC-B Clientes	HU-Cli-01	Como equipo, quiero validar reglas de duplicado y formularios.	POST duplicado→409; formularios con errores de UI.	API+UI Tests	T-B1.4	Colección Postman CRUD + tests de formularios (Jest/Karma).	QA	M	3	Postman/Jest
`HU-Cta-01 | T-C1.1` Endpoints CRUD — OpenAPI /cuentas	https://github.com/24BytesCo/prueba-tecnica-devsu/issues/63	20	24BytesCo	Todo	EPIC-C Cuentas	HU-Cta-01	Como operador, quiero abrir/gestionar cuentas.	saldoInicial≥0; numeroCuenta único; PATCH estado (sin desactivar lógica de negocio adicional).	OpenAPI /cuentas	T-C1.1	Definir contratos CRUD y PATCH de estado + errores 409/422.	Backend	H	2	Swagger/OpenAPI
`HU-Cta-01 | T-C1.3` Pantallas de Interfaz — UI Cuentas	https://github.com/24BytesCo/prueba-tecnica-devsu/issues/64	21	24BytesCo	Todo	EPIC-C Cuentas	HU-Cta-01	Como operador, quiero gestionar cuentas en la UI.	Lista por cliente/estado; abrir/editar; detalle con saldo y movs recientes.	UI Cuentas	T-C1.3	Componentes de lista/form/detalle + servicio Angular.	Frontend	M	4	Angular
`HU-Cta-01 | T-C1.4` Pruebas — API Tests	https://github.com/24BytesCo/prueba-tecnica-devsu/issues/65	22	24BytesCo	Todo	EPIC-C Cuentas	HU-Cta-01	Como equipo, quiero asegurar unicidad y regla de inactivación por saldo.	POST duplicado→409; inactivar con saldo≠0 → 409/422.	API Tests	T-C1.4	Colección Postman y xUnit mínimos para reglas.	QA	M	3	Postman/xUnit
`HU-Mov-01 | T-D1.4` Endpoints — OpenAPI /movimientos	https://github.com/24BytesCo/prueba-tecnica-devsu/issues/66	23	24BytesCo	Todo	EPIC-D Movimientos	HU-Mov-01	Como operador, quiero registrar créditos/débitos con saldos correctos.	GET por cuenta/rango; POST crear; errores de negocio 422.	OpenAPI /movimientos	T-D1.4	Contratos de consulta y creación con ProblemDetails.	Backend	H	2	Swagger/OpenAPI
`HU-Mov-01 | T-D1.5` UI Movimientos — UI Movimientos	https://github.com/24BytesCo/prueba-tecnica-devsu/issues/67	24	24BytesCo	Todo	EPIC-D Movimientos	HU-Mov-01	Como operador, quiero operar movimientos desde la UI.	Formulario con vista previa de saldo; historial por rango; exportar CSV.	UI Movimientos	T-D1.5	Formulario crédito/débito + listado por rango + export CSV.	Frontend	M	5	Angular
`HU-Mov-01 | T-D1.6` Pruebas — API+Unit Tests	https://github.com/24BytesCo/prueba-tecnica-devsu/issues/68	25	24BytesCo	Todo	EPIC-D Movimientos	HU-Mov-01	Como equipo, quiero validar reglas de negocio en endpoints.	Débito sin saldo y tope excedido devuelven 422; casos válidos 201.	API+Unit Tests	T-D1.6	xUnit para reglas y colección Postman con casos 201/422/400/404.	QA	H	4	xUnit/Postman
`HU-Rep-01 | T-E1.1` Consulta y endpoints — Endpoints JSON+PDF	https://github.com/24BytesCo/prueba-tecnica-devsu/issues/69	26	24BytesCo	Todo	EPIC-E Reportes	HU-Rep-01	Como usuario, quiero extractos por rango de fechas (JSON+PDF).	Totales correctos; cliente solo ve sus datos; PDF coincide con JSON.	Endpoints JSON+PDF	T-E1.1	Agregación de totales y endpoints /reportes y /reportes/pdf.	Backend	M	4	EF Core, PDF Adapter
`HU-Rep-01 | T-E1.2` Vista de Interfaz — UI Reportes	https://github.com/24BytesCo/prueba-tecnica-devsu/issues/70	27	24BytesCo	Todo	EPIC-E Reportes	HU-Rep-01	Como usuario, quiero extractos por rango de fechas (JSON+PDF).	Filtros cliente/fechas; tarjetas; tabla; exportar PDF.	UI Reportes	T-E1.2	Vista Angular con filtros, totales, tabla y botón Exportar PDF.	Frontend	M	4	Angular
`HU-Rep-01 | T-E1.3` Pruebas — API Tests	https://github.com/24BytesCo/prueba-tecnica-devsu/issues/71	28	24BytesCo	Todo	EPIC-E Reportes	HU-Rep-01	Como equipo, quiero validar totales y PDF.	Totales JSON correctos; PDF coincide; acceso por rol/propiedad.	API Tests	T-E1.3	Colección Postman (JSON/PDF) + pruebas básicas de descarga en Front.	QA	M	3	Postman/Jest
`SET-05 | DPL1` Despliegue — Compose + instrucciones	https://github.com/24BytesCo/prueba-tecnica-devsu/issues/72	29	24BytesCo	Todo	EPIC-0 Setup	SET-05	Como evaluador, quiero ejecutar la solución en Docker.	Dado Docker, entonces la API y el Front corren con docker-compose.	Compose + instrucciones	DPL1	Dockerfile(s) y docker-compose; README de ejecución.	DevOps	H	3	Docker/Compose